; RUN: llc -mtriple=x86_64-windows -windows-hot-patch-function-file %S/windows-hot-patch-func-names.txt -windows-hot-patch-function-list "?static_member_fn@C@@SAHXZ" -windows-hot-patch-function-list "?instance_member_fn@C@@QEAAHXZ" -windows-hot-patch-function-list "??0C@@QEAA@XZ" < %s | FileCheck %s

; Generated by `clang++ -S -c -std=c++11 -emit-llvm -g` from the following C++11 source:
; static constexpr int Value1 = 1;
; static int Value2 = 2;
; static const char *Text = "Hello, World!";
;
; int fn() { return Value1; }
; class C {
;     const char* MyText;
; public:
;     static int Value3;
;
;     C() : MyText(Text) { fn(); }
;     int instance_member_fn() { return Value1 + Value2; }
;     static int static_member_fn() { return C::Value3 - Value2; }
; };
; namespace N {
;     int namespace_fn() { return C::Value3++; }
; }
; int C::Value3 = 3;
; int main() {
;     Value2++;
;     fn();
;     C{}.instance_member_fn();
;     C::static_member_fn();
;     N::namespace_fn();
;     return 0;
; }

; Validate that fn uses the "__ref_" global variables.
; CHECK:  "?fn@@YAHXZ":                           # @"?fn@@YAHXZ"
; CHECK:          movq    __ref_Value2(%rip), %rax
; CHECK:          movl    (%rax), %eax
; CHECK:          retq

; Validate that N::namespace_fn uses the "__ref_" global variables.
; CHECK:  "?namespace_fn@N@@YAHXZ":               # @"?namespace_fn@N@@YAHXZ"
; CHECK:          movq    "__ref_?Value3@C@@2HA"(%rip), %rax
; CHECK-NEXT:     movl    (%rax), %eax
; CHECK-NEXT:     movl    %eax, %ecx
; CHECK-NEXT:     addl    $1, %ecx
; CHECK-NEXT:     movq    "__ref_?Value3@C@@2HA"(%rip), %rdx
; CHECK-NEXT:     movl    %ecx, (%rdx)
; CHECK-NEXT:     retq

; Validate that main does NOT use the "__ref_" global variables.
; CHECK:  main:                                   # @main
; CHECK:          movl    Value2(%rip), %eax
; CHECK-NEXT:     addl    $1, %eax
; CHECK-NEXT:     movl    %eax, Value2(%rip)

; Validate that C::C uses the "__ref_" global variables.
; CHECK:  "??0C@@QEAA@XZ":                        # @"??0C@@QEAA@XZ"
; CHECK:          movq    __ref_Text(%rip), %rax
; CHECK-NEXT:     movq    (%rax), %rax
; CHECK-NEXT:     movq    %rax, (%rsi)

; Validate that C::instance_member_fn uses the "__ref_" global variables.
; CHECK:  "?instance_member_fn@C@@QEAAHXZ":       # @"?instance_member_fn@C@@QEAAHXZ"
; CHECK:          movq    __ref_Value2(%rip), %rax
; CHECK-NEXT:     movl    (%rax), %eax
; CHECK-NEXT:     addl    $1, %eax
; CHECK-NEXT:     popq    %rcx
; CHECK-NEXT:     retq

; Validate that C::static_member_fn uses the "__ref_" global variables.
; CHECK:  "?static_member_fn@C@@SAHXZ":           # @"?static_member_fn@C@@SAHXZ"
; CHECK:           movq    "__ref_?Value3@C@@2HA"(%rip), %rax
; CHECK-NEXT:      movl    (%rax), %eax
; CHECK-NEXT:      movq    __ref_Value2(%rip), %rcx
; CHECK-NEXT:      subl    (%rcx), %eax
; CHECK-NEXT:      retq

; Validate that new "__ref_" global variables have been introduced.
; CHECK:          .section        .rdata,"dr"
; CHECK:  __ref_Value2:
; CHECK-NEXT:     .quad   Value2
; CHECK:  "__ref_?Value3@C@@2HA":
; CHECK-NEXT:     .quad   "?Value3@C@@2HA"
; CHECK:  __ref_Text:
; CHECK-NEXT:     .quad   Text

; Validate that the hot-patching debug symbols exist.
; CHECK:          .short  4457                            # Record kind: S_HOTPATCHFUNC
; CHECK-NEXT:     .long   [[#%.4u,Fn_FuncId:]]            # Function
; CHECK-NEXT:     .asciz  "?fn@@YAHXZ"                    # Name
; CHECK:          .short  4457                            # Record kind: S_HOTPATCHFUNC
; CHECK-NEXT:     .long   [[#%.4u,Namespace_FuncId:]]     # Function
; CHECK-NEXT:     .asciz  "?namespace_fn@N@@YAHXZ"        # Name
; CHECK:          .short  4457                            # Record kind: S_HOTPATCHFUNC
; CHECK-NEXT:     .long   [[#%.4u,Ctor_FuncId:]]          # Function
; CHECK-NEXT:     .asciz  "??0C@@QEAA@XZ"                 # Name
; CHECK:          .short  4457                            # Record kind: S_HOTPATCHFUNC
; CHECK-NEXT:     .long   [[#%.4u,Instance_FuncId:]]      # Function
; CHECK-NEXT:     .asciz  "?instance_member_fn@C@@QEAAHXZ" # Name
; CHECK:          .short  4457                            # Record kind: S_HOTPATCHFUNC
; CHECK-NEXT:     .long   [[#%.4u,Static_FuncId:]]        # Function
; CHECK-NEXT:     .asciz  "?static_member_fn@C@@SAHXZ"    # Name

; Validate that the debug symbols for the new "__ref_" globals exist.
; But first, skip the old globals so the CHECK-NEXT entries work correctly.
; CHECK:          .asciz	"C::Value3"                     # Name
; CHECK:          .asciz	"Value2"                        # Name
; CHECK:          .asciz	"Text"                          # Name
; CHECK:        	.short	4365                            # Record kind: S_GDATA32
; CHECK-NEXT:    	.long	[[#]]                             # Type
; CHECK-NEXT:    	.secrel32	__ref_Value2                  # DataOffset
; CHECK-NEXT:    	.secidx	__ref_Value2                    # Segment
; CHECK-NEXT:    	.asciz	"__ref_Value2"                  # Name
; CHECK:        	.short	4365                            # Record kind: S_GDATA32
; CHECK-NEXT:    	.long	[[#]]                             # Type
; CHECK-NEXT:    	.secrel32	"__ref_?Value3@C@@2HA"        # DataOffset
; CHECK-NEXT:    	.secidx	"__ref_?Value3@C@@2HA"          # Segment
; CHECK-NEXT:    	.asciz	"__ref_?Value3@C@@2HA"          # Name
; CHECK:        	.short	4365                            # Record kind: S_GDATA32
; CHECK-NEXT:    	.long	[[#]]                             # Type
; CHECK-NEXT:    	.secrel32	__ref_Text                    # DataOffset
; CHECK-NEXT:    	.secidx	__ref_Text                      # Segment
; CHECK-NEXT:    	.asciz	"__ref_Text"                    # Name

; Validate that the function IDs matched in the hot-patching debug symbols reference the correct functions.
; CHECK:          # FuncId (0x[[#%.4X, Fn_FuncId]])
; CHECK:          .asciz  "fn"                            # Name
; CHECK:          # FuncId (0x[[#%.4X, Namespace_FuncId]])
; CHECK:          .asciz  "namespace_fn"                  # Name
; CHECK:          # MemberFuncId (0x[[#%.4X, Ctor_FuncId]])
; CHECK:          .asciz  "C"                             # Name
; CHECK:          # MemberFuncId (0x[[#%.4X, Instance_FuncId]])
; CHECK:          .asciz  "instance_member_fn"            # Name
; CHECK:          # MemberFuncId (0x[[#%.4X, Static_FuncId]])
; CHECK:          .asciz  "static_member_fn"              # Name

; ModuleID = '.\hot-patch.cpp'
source_filename = ".\\hot-patch.cpp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc19.36.32537"

%class.C = type { ptr }

$"??0C@@QEAA@XZ" = comdat any

$"?instance_member_fn@C@@QEAAHXZ" = comdat any

$"?static_member_fn@C@@SAHXZ" = comdat any

$"??_C@_0O@KLMCIIGF@Hello?0?5World?$CB?$AA@" = comdat any

@"?Value3@C@@2HA" = dso_local global i32 3, align 4, !dbg !0
@Value2 = internal global i32 2, align 4, !dbg !28
@Text = internal global ptr @"??_C@_0O@KLMCIIGF@Hello?0?5World?$CB?$AA@", align 8, !dbg !35
@"??_C@_0O@KLMCIIGF@Hello?0?5World?$CB?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"Hello, World!\00", comdat, align 1, !dbg !30

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local noundef i32 @"?fn@@YAHXZ"() #0 !dbg !43 {
  %1 = load i32, ptr @Value2, align 4, !dbg !45
  ret i32 %1, !dbg !45
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local noundef i32 @"?namespace_fn@N@@YAHXZ"() #0 !dbg !46 {
  %1 = load i32, ptr @"?Value3@C@@2HA", align 4, !dbg !48
  %2 = add nsw i32 %1, 1, !dbg !48
  store i32 %2, ptr @"?Value3@C@@2HA", align 4, !dbg !48
  ret i32 %1, !dbg !48
}

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #1 !dbg !49 {
  %1 = alloca i32, align 4
  %2 = alloca %class.C, align 8
  store i32 0, ptr %1, align 4
  %3 = load i32, ptr @Value2, align 4, !dbg !50
  %4 = add nsw i32 %3, 1, !dbg !50
  store i32 %4, ptr @Value2, align 4, !dbg !50
  %5 = call noundef i32 @"?fn@@YAHXZ"(), !dbg !51
  %6 = call noundef ptr @"??0C@@QEAA@XZ"(ptr noundef nonnull align 8 dereferenceable(8) %2), !dbg !52
  %7 = call noundef i32 @"?instance_member_fn@C@@QEAAHXZ"(ptr noundef nonnull align 8 dereferenceable(8) %2), !dbg !52
  %8 = call noundef i32 @"?static_member_fn@C@@SAHXZ"(), !dbg !53
  %9 = call noundef i32 @"?namespace_fn@N@@YAHXZ"(), !dbg !54
  ret i32 0, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local noundef ptr @"??0C@@QEAA@XZ"(ptr noundef nonnull returned align 8 dereferenceable(8) %0) unnamed_addr #2 comdat align 2 !dbg !56 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.dbg.declare(metadata ptr %2, metadata !57, metadata !DIExpression()), !dbg !59
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %class.C, ptr %3, i32 0, i32 0, !dbg !60
  %5 = load ptr, ptr @Text, align 8, !dbg !60
  store ptr %5, ptr %4, align 8, !dbg !60
  %6 = call noundef i32 @"?fn@@YAHXZ"(), !dbg !61
  ret ptr %3, !dbg !60
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local noundef i32 @"?instance_member_fn@C@@QEAAHXZ"(ptr noundef nonnull align 8 dereferenceable(8) %0) #0 comdat align 2 !dbg !63 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.dbg.declare(metadata ptr %2, metadata !64, metadata !DIExpression()), !dbg !65
  %3 = load ptr, ptr %2, align 8
  %4 = load i32, ptr @Value2, align 4, !dbg !66
  %5 = add nsw i32 1, %4, !dbg !66
  ret i32 %5, !dbg !66
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local noundef i32 @"?static_member_fn@C@@SAHXZ"() #0 comdat align 2 !dbg !67 {
  %1 = load i32, ptr @"?Value3@C@@2HA", align 4, !dbg !68
  %2 = load i32, ptr @Value2, align 4, !dbg !68
  %3 = sub nsw i32 %1, %2, !dbg !68
  ret i32 %3, !dbg !68
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

attributes #0 = { mustprogress noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress noinline norecurse optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!37, !38, !39, !40, !41}
!llvm.ident = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "Value3", linkageName: "?Value3@C@@2HA", scope: !2, file: !6, line: 18, type: !13, isLocal: false, isDefinition: true, declaration: !12)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_11, file: !3, producer: "clang version 16.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !4, globals: !24, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "hot-patch.cpp", directory: "C:\\llvm", checksumkind: CSK_MD5, checksum: "df48cb3307e0a3ce14f18e08b27c32ee")
!4 = !{!5}
!5 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "C", file: !6, line: 6, size: 64, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !7, identifier: ".?AVC@@")
!6 = !DIFile(filename: ".\\hot-patch.cpp", directory: "C:\\llvm", checksumkind: CSK_MD5, checksum: "df48cb3307e0a3ce14f18e08b27c32ee")
!7 = !{!8, !12, !14, !18, !21}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "MyText", scope: !5, file: !6, line: 7, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "Value3", scope: !5, file: !6, line: 9, baseType: !13, flags: DIFlagPublic | DIFlagStaticMember)
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DISubprogram(name: "C", scope: !5, file: !6, line: 11, type: !15, scopeLine: 11, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17}
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!18 = !DISubprogram(name: "instance_member_fn", linkageName: "?instance_member_fn@C@@QEAAHXZ", scope: !5, file: !6, line: 12, type: !19, scopeLine: 12, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!19 = !DISubroutineType(types: !20)
!20 = !{!13, !17}
!21 = !DISubprogram(name: "static_member_fn", linkageName: "?static_member_fn@C@@SAHXZ", scope: !5, file: !6, line: 13, type: !22, scopeLine: 13, flags: DIFlagPublic | DIFlagPrototyped | DIFlagStaticMember, spFlags: 0)
!22 = !DISubroutineType(types: !23)
!23 = !{!13}
!24 = !{!25, !0, !28, !30, !35}
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression(DW_OP_constu, 1, DW_OP_stack_value))
!26 = distinct !DIGlobalVariable(name: "Value1", scope: !2, file: !6, line: 1, type: !27, isLocal: true, isDefinition: true)
!27 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "Value2", scope: !2, file: !6, line: 2, type: !13, isLocal: true, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(scope: null, file: !6, line: 3, type: !32, isLocal: true, isDefinition: true)
!32 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 112, elements: !33)
!33 = !{!34}
!34 = !DISubrange(count: 14)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "Text", scope: !2, file: !6, line: 3, type: !9, isLocal: true, isDefinition: true)
!37 = !{i32 2, !"CodeView", i32 1}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{i32 1, !"wchar_size", i32 2}
!40 = !{i32 8, !"PIC Level", i32 2}
!41 = !{i32 7, !"uwtable", i32 2}
!42 = !{!"clang version 16.0.6"}
!43 = distinct !DISubprogram(name: "fn", linkageName: "?fn@@YAHXZ", scope: !6, file: !6, line: 5, type: !22, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !44)
!44 = !{}
!45 = !DILocation(line: 5, scope: !43)
!46 = distinct !DISubprogram(name: "namespace_fn", linkageName: "?namespace_fn@N@@YAHXZ", scope: !47, file: !6, line: 16, type: !22, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !44)
!47 = !DINamespace(name: "N", scope: null)
!48 = !DILocation(line: 16, scope: !46)
!49 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 19, type: !22, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !44)
!50 = !DILocation(line: 20, scope: !49)
!51 = !DILocation(line: 21, scope: !49)
!52 = !DILocation(line: 22, scope: !49)
!53 = !DILocation(line: 23, scope: !49)
!54 = !DILocation(line: 24, scope: !49)
!55 = !DILocation(line: 25, scope: !49)
!56 = distinct !DISubprogram(name: "C", linkageName: "??0C@@QEAA@XZ", scope: !5, file: !6, line: 11, type: !15, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, declaration: !14, retainedNodes: !44)
!57 = !DILocalVariable(name: "this", arg: 1, scope: !56, type: !58, flags: DIFlagArtificial | DIFlagObjectPointer)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!59 = !DILocation(line: 0, scope: !56)
!60 = !DILocation(line: 11, scope: !56)
!61 = !DILocation(line: 11, scope: !62)
!62 = distinct !DILexicalBlock(scope: !56, file: !6, line: 11)
!63 = distinct !DISubprogram(name: "instance_member_fn", linkageName: "?instance_member_fn@C@@QEAAHXZ", scope: !5, file: !6, line: 12, type: !19, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, declaration: !18, retainedNodes: !44)
!64 = !DILocalVariable(name: "this", arg: 1, scope: !63, type: !58, flags: DIFlagArtificial | DIFlagObjectPointer)
!65 = !DILocation(line: 0, scope: !63)
!66 = !DILocation(line: 12, scope: !63)
!67 = distinct !DISubprogram(name: "static_member_fn", linkageName: "?static_member_fn@C@@SAHXZ", scope: !5, file: !6, line: 13, type: !22, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, declaration: !21, retainedNodes: !44)
!68 = !DILocation(line: 13, scope: !67)
